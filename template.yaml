AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 30
    MemorySize: 1024
    Runtime: nodejs20.x
    Architectures: ['arm64']
    Environment:
      Variables:
        NODE_OPTIONS: '--enable-source-maps'
        NODE_ENV: 'production'
        S3_BASE_URL: !Sub 'https://${FrontendBucket}.s3.${AWS::Region}.amazonaws.com'
    EphemeralStorage:
      Size: 512
  Api:
    OpenApiVersion: '2.0'
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"
      MaxAge: 600

Resources:
  NodeModulesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: nest-dependencies
      Description: Node modules for Nest.js application
      ContentUri: layer/
      CompatibleRuntimes:
        - nodejs20.x
      RetentionPolicy: Retain

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${FrontendBucket.Arn}/*'

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      BinaryMediaTypes:
        - 'image/*'
        - 'multipart/form-data'
        - 'text/html'  # 在 Api 资源中添加 HTML 作为二进制类型
      Auth:
        DefaultAuthorizer: NONE

  NestjsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      SkipBuild: true
    Properties:
      Handler: lambda.handler
      CodeUri: ./dist
      MemorySize: 3008
      Timeout: 30
      Layers:
        - !Ref NodeModulesLayer
      Policies:
        - S3CrudPolicy:
            BucketName: aladdinagi-assets
        - VPCAccessPolicy: {}
      Events:
        RootPathEvent:
          Type: Api
          Properties:
            Path: /
            Method: ANY
            RestApiId: !Ref Api
            Auth:
              Authorizer: NONE
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref Api
            Auth:
              Authorizer: NONE
      AutoPublishAlias: live
      Environment:
        Variables:
          NODE_OPTIONS: '--enable-source-maps'
          NODE_ENV: 'production'
          S3_BASE_URL: !Sub 'https://${FrontendBucket}.s3.${AWS::Region}.amazonaws.com'

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/dev'
  FunctionArn:
    Description: Lambda Function ARN
    Value: !GetAtt NestjsFunction.Arn
  FrontendBucketName:
    Description: Name of the S3 bucket for frontend assets
    Value: !Ref FrontendBucket
  FrontendBucketWebsite:
    Description: URL of the S3 bucket website
    Value: !GetAtt FrontendBucket.WebsiteURL